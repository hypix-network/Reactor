package dev.hypix.dataparser;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONArray;
import com.alibaba.fastjson2.JSONObject;

import dev.hypix.dataparser.util.AppendOptions;

public interface Parser {

    public static final File SRC = new File("data-parser/src/main/java");
    public static final File RESOURCES = new File("data-parser/src/main/resources");

    public void load() throws IOException;

    default void appendString(final String string, final StringBuilder builder) {
        builder.append('"');
        builder.append(string);
        builder.append('"');
    }

    default void append(final StringBuilder builder, final Object... objects) {
        append(new AppendOptions(), builder, objects);
    }

    default void append(final AppendOptions options, final StringBuilder builder, final Object... objects) {
        int i = 0;
        for (final Object object : objects) {
            if (object == null && !options.isAppendNullable()) {
                if (++i != objects.length) {
                    builder.append(',');
                }
                continue;
            }
            if (object instanceof String string && options.isAddStringQuoteMarks()) {
                appendString(string, builder);
            } else {
                builder.append(object);
            }
            if (++i != objects.length) {
                builder.append(',');
            }
            if (options.isStartInNewLine()) {
                builder.append('\n');
                for (int s = 0; s < options.getSpacesInNewLine(); s++) {
                    builder.append(' ');
                }
            }
        }
    }

    default String toFieldName(String string) {
        final int index = string.indexOf(':');
        if (index != -1) {
            string = string.substring(index+1);
        }
        return string
            .replace('.', '_')
            .replace('/', '_')
            .toUpperCase();
    }

    default JSONArray loadJsonArray(final String path) {
        try {
            return JSON.parseArray(Files.newInputStream(new File(RESOURCES, path).toPath()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    default JSONObject loadJsonObject(final String path) throws IOException {
        return JSON.parseObject(Files.newInputStream(new File(RESOURCES, path).toPath()));
    }

    default String loadTemplate(final String templateFile) {
        final File file = new File(RESOURCES, "template/" + templateFile + ".template");
        if (!file.exists()) {
            return null;
        }
        try {
            return new String(Files.newInputStream(file.toPath()).readAllBytes());
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    default void writeFile(final Class<?> clazz, final String data, final String outFileName) throws IOException {
        final String packageName = clazz.getPackageName();
        final File outFile = new File(SRC, packageName.replace('.', '/') + '/' + outFileName + ".java");
        if (!outFile.exists()) {
            try {
                outFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
        try (final OutputStream outputStream = Files.newOutputStream(outFile.toPath())) {
            outputStream.write(createAutogeneratedMessage(clazz).getBytes(StandardCharsets.UTF_8));
            outputStream.write(("package " + packageName + ";\n").getBytes());
            outputStream.write(data.getBytes());
        }
    }

    private static String createAutogeneratedMessage(final Class<?> clazz) {
        final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(
            "'Year:' yyyy'. Month:' MM'. Day:' dd'. Time: 'HH':'mm':'ss"
        ).withZone(ZoneId.systemDefault());

        return
            """
            /*
            * Autogenerated file. Please don't touch :)
            * Class generator: %class% (module data-parser)
            * Date: %date%
            */
            """
            .replace("%class%", clazz.getName())
            .replace("%date%", formatter.format(Instant.now()));
    }
}